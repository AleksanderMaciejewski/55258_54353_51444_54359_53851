@model List<Bookstore.Models.BookModel>

<div id="home" class="page">
    <div class="search-bar">
        <input type="text" id="searchInput" placeholder="Search by author">
        <button type="button" onclick="searchBook()">Search</button>
    </div>
    <div class="table-container">
        <div class="add-book-button" id="addBookButton">
            <button type="button" onclick="toggleAddBookForm()">Add New Book</button>
        </div>
        <form id="addBookForm" style="display: none;" onsubmit="addBook(event)">
            <label for="title">Title:</label>
            <input type="text" id="title" name="title" required><br>
            <label for="author">Author:</label>
            <input type="text" id="author" name="author" required><br>
            <button type="submit">Add</button>
        </form>
        <table>
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Title</th>
                    <th>Author</th>
                    <th></th>
                </tr>
            </thead>
            <tbody id="bookTableBody">
                @foreach (var book in Model)
                {
                    <tr id="book-@book.Id">
                        <td>@book.Id</td>
                        <td>@book.Title</td>
                        <td>@book.Author</td>
                        <td>
                            <button type="button" onclick="editBook(@book.Id)">Edit</button>
                            <button type="button" onclick="deleteBook(@book.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <form id="editBookForm" style="display: none;" onsubmit="updateBook(event)">
            <label for="editTitle">Title:</label>
            <input type="text" id="editTitle" name="title" required><br>
            <label for="editAuthor">Author:</label>
            <input type="text" id="editAuthor" name="author" required><br>
            <button type="submit">Save Changes</button>
        </form>
    </div>
</div>

<script>
    let editBookId = null;

    function toggleAddBookForm() {
        const addBookForm = document.getElementById("addBookForm");
        addBookForm.style.display = addBookForm.style.display === "none" ? "block" : "none";
    }

    function toggleEditBookForm() {
        const editBookForm = document.getElementById("editBookForm");
        editBookForm.style.display = editBookForm.style.display === "none" ? "block" : "none";
    }

    function editBook(id) {
        editBookId = id;
        fetch(`/api/BookApi/GetBook/${id}`, { method: 'GET' })
            .then(response => response.json())
            .then(book => {
                document.getElementById("editTitle").value = book.title;
                document.getElementById("editAuthor").value = book.author;
                toggleEditBookForm();
            })
            .catch(error => console.error('Fetch operation error:', error));
    }

    function deleteBook(id) {
        fetch(`/api/BookApi/Delete/${id}`, { method: 'DELETE' })
            .then(response => {
                if (!response.ok) throw new Error('Delete failed');
                document.getElementById(`book-${id}`).remove();
            })
            .catch(error => console.error('Fetch operation error:', error));
    }

    function addBook(event) {
        event.preventDefault();
        const formData = new FormData(event.target);
        const jsonData = Object.fromEntries(formData);

        fetch('/api/BookApi/Add', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(jsonData)
        })
            .then(response => {
                if (!response.ok) throw new Error('Add failed');
                return response.json();
            })
            .then(data => {
                location.reload(); // Reload page to reflect the new book
            })
            .catch(error => console.error('Fetch operation error:', error));
    }

    function updateBook(event) {
        event.preventDefault();
        const formData = new FormData(event.target);
        const jsonData = Object.fromEntries(formData);

        fetch(`/api/BookApi/Update/${editBookId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(jsonData)
        })
            .then(response => {
                if (!response.ok) throw new Error('Update failed');
                location.reload(); // Reload page to reflect the updated book
            })
            .catch(error => console.error('Fetch operation error:', error));
    }

    function searchBook() {
        const searchInput = document.getElementById("searchInput").value.toLowerCase();
        const tableRows = document.getElementById("bookTableBody").getElementsByTagName("tr");

        for (let i = 0; i < tableRows.length; i++) {
            const author = tableRows[i].getElementsByTagName("td")[2].innerText.toLowerCase();

            if (author.includes(searchInput)) {
                tableRows[i].style.display = "";
            } else {
                tableRows[i].style.display = "none";
            }
        }
    }
</script>
<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    .page {
        padding: 20px;
    }

    .search-bar {
        margin-bottom: 20px;
    }

        .search-bar input[type="text"], .search-bar button {
            padding: 8px;
            border: none;
            border-radius: 5px;
            margin-right: 5px;
        }

    .table-container {
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 20px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        border-bottom: 1px solid #ddd;
        padding: 10px;
        text-align: left;
    }

    th {
        background-color: #f2f2f2;
    }

    .add-book-button {
        margin-bottom: 20px;
    }

        .add-book-button button, button {
            padding: 10px 10px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

    form {
        margin-bottom: 20px;
    }

    label {
        margin-right: 10px;
    }

    input[type="text"] {
        padding: 8px;
        border-radius: 5px;
        border: 1px solid #ccc;
        margin-bottom: 10px;
    }

    button[type="submit"] {
        padding: 10px 20px;
        background-color: #28a745;
        color: #fff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }
</style>