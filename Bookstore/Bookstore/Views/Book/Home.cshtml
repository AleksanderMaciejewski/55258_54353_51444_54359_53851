@model List<BookModel>

<script>
    let editBookId = null;
    let sellBookId = null;
    let orderBookId = null;
    function toggleAddBookForm() {
        var addBookForm = document.getElementById("addBookForm");
        addBookForm.style.display = addBookForm.style.display === "none" ? "block" : "none";
    }

    function toggleEditBookForm() {
        var editBookForm = document.getElementById("editBookForm");
        editBookForm.style.display = editBookForm.style.display === "none" ? "block" : "none";
    }

    function toggleSellBookForm(id = null) {
        sellBookId = id;
        var sellBookForm = document.getElementById("sellBookForm");
        sellBookForm.style.display = sellBookForm.style.display === "none" ? "block" : "none";
    }

    function toggleOrderBookForm(id = null) {
        orderBookId = id;
        var orderBookForm = document.getElementById("orderBookForm");
        orderBookForm.style.display = orderBookForm.style.display === "none" ? "block" : "none";
    }

    function editBook(id) {
        editBookId = id;
        fetch('/api/Book/GetBook?id=' + id, {
            method: 'Get'
            })
            .then(response => {
                return response.json(); 
            })
            .then(book => {
                document.getElementById("editTitle").value = book.title;
                document.getElementById("editAuthor").value = book.author;
                toggleEditBookForm();
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
    }

    function deleteBook(id) {
        fetch('/api/Book/Delete?id=' + id, {
            method: 'DELETE'
        })
            .then(response => {
                return response.json();
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
    }
</script>

<div id="home" class="page">
    <div class="search-bar">
        <input type="text" id="searchInput" placeholder="Wyszukaj po tytule lub autorze">
        <button onclick="searchBook()">Szukaj</button>
    </div>
    <div class="table-container">
        <div class="add-button" id="addBookButton">
            <button onclick="toggleAddBookForm()">Dodaj nową książkę</button>
        </div>
        <form id="addBookForm" style="display: none;">
            <label for="title">Title:</label>
            <input type="text" id="title" name="title" required><br>
            <label for="author">Author:</label>
            <input type="text" id="author" name="author" required><br>
            <button type="submit">Dodaj</button>
        </form>
        <table>
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Title</th>
                    <th>Author</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var book in Model)
                {
                    <tr>
                        <td>@book.Id</td>
                        <td>@book.Title</td>
                        <td>@book.Author</td>
                        <td>
                            <button onclick="editBook(@book.Id)">Edytuj</button>
                            <button onclick="deleteBook(@book.Id)">Usuń</button>
                            <button onclick="toggleSellBookForm(@book.Id)">Sprzedaj</button>
                            <button onclick="toggleOrderBookForm(@book.Id)">Zamów</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <form id="editBookForm" style="display: none;">
            <label for="editTitle">Title:</label>
            <input type="text" id="editTitle" name="title" required><br>
            <label for="editAuthor">Author:</label>
            <input type="text" id="editAuthor" name="author" required><br>
            <button type="submit">Save Changes</button>
        </form>

        <form id="sellBookForm" style="display: none;">
            <label for="client">Klient:</label>
            <input type="text" id="client" name="client" required><br>
            <button type="submit">Sprzedaj</button>
        </form>

        <form id="orderBookForm" style="display: none;">
            <label for="client">Klient:</label>
            <input type="text" id="client" name="client" required><br>
            <button type="submit">Zamów</button>
        </form>

    </div>
</div>

<script>
    document.getElementById("sellBookForm").addEventListener("submit", function (event) {
        event.preventDefault();
        var formData = new FormData(this);
        var jsonData = {};
        var client;
        formData.forEach(function (value, key) {
            client= value;
        });

        fetch('/api/SoldBook/Add?book=' + sellBookId + "&client=" + client, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonData)
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log(data);
                document.getElementById("client").value = "";
                toggleSellBookForm();
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
    });

    document.getElementById("orderBookForm").addEventListener("submit", function (event) {
        event.preventDefault();
        var formData = new FormData(this);
        var jsonData = {};
        var client;
        formData.forEach(function (value, key) {
            client = value;
        });

        fetch('/api/OrderedBook/Add?book=' + orderBookId + "&client=" + client, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonData)
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log(data);
                document.getElementById("client").value = "";
                toggleOrderBookForm();
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
    });

    document.getElementById("addBookForm").addEventListener("submit", function (event) {
        event.preventDefault(); 
        var formData = new FormData(this);
        var jsonData = {};
        formData.forEach(function (value, key) {
            jsonData[key] = value;
        });

        fetch('/api/Book/Add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonData)
            })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
            .then(data => {
                console.log(data);
                document.getElementById("title").value = "";
                document.getElementById("author").value = "";
                toggleAddBookForm();
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
    });

    document.getElementById("editBookForm").addEventListener("submit", function (event) {
        event.preventDefault(); 
        var formData = new FormData(this);
        var jsonData = {};
        formData.forEach(function (value, key) {
            jsonData[key] = value;
        });

        fetch('/api/Book/Update?id=' + editBookId, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(jsonData)
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
            .then(data => {
                document.getElementById("editTitle").value = "";
                document.getElementById("editAuthor").value = "";
                toggleEditBookForm();
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
    });

    function searchBook() {
        var searchInput = document.getElementById("searchInput").value.toLowerCase();
        var tableRows = document.getElementsByTagName("tr");

        for (var i = 1; i < tableRows.length; i++) {
            var title = tableRows[i].getElementsByTagName("td")[1].innerText.toLowerCase();
            var author = tableRows[i].getElementsByTagName("td")[2].innerText.toLowerCase();

            if (title.includes(searchInput) || author.includes(searchInput)) {
                tableRows[i].style.display = "";
            } else {
                tableRows[i].style.display = "none";
            }
        }
    }

</script>
